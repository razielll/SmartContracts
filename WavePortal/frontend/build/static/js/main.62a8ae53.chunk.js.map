{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","message","setMessage","contractAddress","contractABI","ContractJSON","abi","useEffect","checkIfWalletIsConnected","wavePortalContract","onNewWave","from","timestamp","console","log","prevState","address","Date","window","ethereum","signer","ethers","providers","Web3Provider","getSigner","Contract","on","off","getAllWaves","a","provider","waves","wavesCleaned","map","wave","waver","request","method","accounts","length","account","connectWallet","alert","getTotalWaves","count","toNumber","waveTxn","hash","wait","getTotalWaveCount","className","placeholder","value","onChange","e","target","onClick","index","key","style","backgroundColor","marginTop","padding","overflowWrap","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62a8ae53.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport ContractJSON from './utils/WavePortal.json';\nimport './App.css';\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [allWaves, setAllWaves] = useState([]);\n  const [message, setMessage] = useState('');\n  /**\n  * Create a variable here that holds the contract address after you deploy!\n  */\n  const contractAddress = '0xD61C996DA93c40f337BF24efc30005d0931ED515';\n  const contractABI = ContractJSON.abi;\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    return () => { };\n  }, []);\n\n  useEffect(() => {\n    let wavePortalContract;\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves(prevState => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n    };\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n\n\n  const getAllWaves = async () => {\n    const { ethereum } = window;\n\n    try {\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const waves = await wavePortalContract.getAllWaves();\n\n        const wavesCleaned = waves.map(wave => {\n          return {\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          };\n        });\n\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n\n  // const getAllWaves = async () => {\n  //   try {\n  //     const { ethereum } = window;\n  //     if (ethereum) {\n  //       const provider = new ethers.providers.Web3Provider(ethereum);\n  //       const signer = provider.getSigner();\n  //       const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n  //       const waves = await wavePortalContract.getAllWaves();\n\n  //       let wavesCleaned = [];\n  //       // const wavesCleaned = waves.map(wave => ({\n  //       //   address: wave.waver,\n  //       //   timestamp: new Date(wave.timestamp * 1000),\n  //       //   message: wave.message\n  //       // }));\n  //       wavesCleaned = waves.map(({ waver, timestamp, message }) => ({ waver, timestamp, message }));\n  //       //   address: wave.waver,\n  //       //   timestamp: new Date(wave.timestamp * 1000),\n  //       //   message: wave.message\n  //       // }));\n  //       // waves.forEach(wave => {\n  //       //   wavesCleaned.push({\n  //       //     address: wave.waver,\n  //       //     timestamp: new Date(wave.timestamp * 1000),\n  //       //     message: wave.message\n  //       //   });\n  //       // });\n\n  //       setAllWaves(wavesCleaned);\n  //     } else {\n  //       console.log(\"Ethereum object doesn't exist!\")\n  //     }\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // }\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      /*\n       * Check if we're authorized to access the user's wallet\n       */\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Found an authorized account -> ', account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log('No authorized account found.');\n      }\n    } catch (e) {\n      console.log(`Caught Err ->${e}`)\n    }\n  }\n\n  /**\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        if (!message) return;\n        /*\n        * Execute the actual wave from your smart contract\n        */\n        const waveTxn = await wavePortalContract.wave(message);\n        // const waveTxn = await wavePortalContract.wave(message, { gasLimit: 450000 });\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved *NEW* total wave count...\", count.toNumber());\n        setMessage('');\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const getTotalWaveCount = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n    let count = await wavePortalContract.getTotalWaves();\n    console.log('returned:', count.toNumber());\n  }\n\n  return (\n    <div className='mainContainer'>\n\n      <div className='dataContainer'>\n        <div className='header'>\n          👋 Hey there 500!\n        </div>\n\n        <div className='bio'>\n          Messages that live on the rinkeby testnet blockchain forever ? down here\n        </div>\n\n        <input placeholder=\"Write a message\" value={message} onChange={(e) => setMessage(e.target.value)}/>\n        <button className='waveButton' onClick={wave}>\n          Wave at Me\n        </button>\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n        <button className=\"waveButton\" onClick={getTotalWaveCount}>Get count</button>\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div style={{ overflowWrap: 'break-word'}}>From address: {wave.address}</div>\n              <div style={{ overflowWrap: 'break-word'}}>Message: {wave.message}</div>\n            </div>)\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}